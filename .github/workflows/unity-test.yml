name: Unity Test

on: [push, pull_request]

jobs:
  run-tests:
    name: 🦊 Run unity tests
    runs-on: ubuntu-latest # ジョブを実行する仮想OS
    permissions:
      contents: read

    steps:
      # 仮想OSにチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # GitHubが提供するキャッシュストレージにLibraryを一時保存する
      - name: Cache Unity library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Unity認証情報の確認
      - name: Verify Unity Credentials
        run: |
          echo "🔍 Checking Unity credentials..."
          if [ -z "${{ secrets.UNITY_LICENSE }}" ]; then
            echo "❌ UNITY_LICENSE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.UNITY_EMAIL }}" ]; then
            echo "❌ UNITY_EMAIL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.UNITY_PASSWORD }}" ]; then
            echo "❌ UNITY_PASSWORD is not set"
            exit 1
          fi
          echo "✅ All Unity credentials are configured"

      # Personal ライセンス認証（Unity 6対応）
      - name: Activate Unity Personal License
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "🔑 Activating Unity Personal License..."
          
          # Personal License の場合の認証
          if [ -n "$UNITY_LICENSE" ]; then
            echo "📄 Using existing Personal License file"
            echo "$UNITY_LICENSE" | base64 -d > /tmp/Unity_lic.ulf 2>/dev/null || echo "$UNITY_LICENSE" > /tmp/Unity_lic.ulf
            
            timeout 600 $UNITY_PATH -batchmode -quit \
              -manualLicenseFile /tmp/Unity_lic.ulf \
              -logFile /tmp/unity-activation.log \
              2>&1 || ACTIVATION_RESULT=$?
          else
            echo "🎫 Requesting new Personal License (requires manual approval)"
            
            # Personal License のリクエスト認証
            timeout 600 $UNITY_PATH -batchmode -quit \
              -username "$UNITY_EMAIL" \
              -password "$UNITY_PASSWORD" \
              -createManualActivationFile \
              -logFile /tmp/unity-activation.log \
              2>&1 || ACTIVATION_RESULT=$?
            
            # 手動認証ファイルの確認
            if [ -f "Unity_v*.alf" ]; then
              echo "📁 Manual activation file created:"
              ls -la Unity_v*.alf
              echo "⚠️ Manual activation required at: https://license.unity3d.com/manual"
              echo "💡 Upload the .alf file and get .ulf license, then set as UNITY_LICENSE secret"
            fi
          fi
          
          echo "📋 Activation result: ${ACTIVATION_RESULT:-0}"
          
          if [ -f /tmp/unity-activation.log ]; then
            echo "📄 Activation log:"
            cat /tmp/unity-activation.log
            
            # Personal License 特有のエラーチェック
            if grep -q "Manual activation" /tmp/unity-activation.log; then
              echo "ℹ️ Manual activation detected (normal for Personal License)"
            fi
            
            if grep -q "License activated" /tmp/unity-activation.log; then
              echo "✅ Personal License activation successful"
            fi
            
            if grep -q "Invalid credentials" /tmp/unity-activation.log; then
              echo "❌ Credentials invalid for Personal License"
              echo "💡 Check UNITY_EMAIL and UNITY_PASSWORD"
            fi
          fi
          
      # テストの実行
      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          testMode: editmode # test only editmode
          artifactsPath: test-results
          unityVersion: 6000.0.48f1
          customParameters: '-nographics -silent-crashes -logFile - -batchmode'
        continue-on-error: true

      # テスト結果のアップロード
      - name : Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

      # テスト結果の解析とサマリー作成
      - name: Parse Test Results
        id: parse-results
        if: always()
        run: |
          # テスト結果XMLファイルを解析
          editmode_result="❌ Failed"
          editmode_details=""
          
          # テスト結果の確認
          if [ -f "test-results/editmode-results.xml" ]; then
            editmode_tests=$(grep -o 'tests="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            editmode_failures=$(grep -o 'failures="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            editmode_errors=$(grep -o 'errors="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            
            if [ "$editmode_failures" = "0" ] && [ "$editmode_errors" = "0" ]; then
              editmode_result="✅ Passed"
            fi
            editmode_details="Tests: $editmode_tests, Failures: $editmode_failures, Errors: $editmode_errors"
          fi
          
          # 結果をGitHub環境変数に設定
          echo "editmode_result=$editmode_result" >> $GITHUB_OUTPUT
          echo "editmode_details=$editmode_details" >> $GITHUB_OUTPUT
          
      # ジョブサマリーにテスト結果を表示
      - name: Job Summary
        if: always()
        run: |
          echo "## 🧿 Unity Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Result | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ steps.parse-results.outputs.editmode_result }} | ${{ steps.parse-results.outputs.editmode_details }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
