name: Unity Test

on: [push, pull_request]

jobs:
  run-tests:
    name: 🦊 Run unity tests
    runs-on: ubuntu-latest # ジョブを実行する仮想OS
    permissions:
      contents: read

    steps:
      # 仮想OSにチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # GitHubが提供するキャッシュストレージにLibraryを一時保存する
      - name: Cache Unity library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # テストの実行(editmodeのみ)
      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          testMode: editmode # test only editmode
          artifactsPath: test-results
          checkName: 'EditMode Test Results'
        continue-on-error: true

      # テスト結果のアップロード(write権限がない場合はスキップ)
      - name : Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

      # テスト結果の解析とサマリー作成
      - name: Parse Test Results
        id: parse-results
        if: always()
        run: |
          # テスト結果XMLファイルを解析
          editmode_result="❌ Failed"
          editmode_details=""
          
          # EditModeテスト結果の確認
          if [ -f "test-results/editmode-results.xml" ]; then
            editmode_tests=$(grep -o 'tests="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            editmode_failures=$(grep -o 'failures="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            editmode_errors=$(grep -o 'errors="[0-9]*"' test-results/editmode-results.xml | cut -d'"' -f2)
            
            if [ "$editmode_failures" = "0" ] && [ "$editmode_errors" = "0" ]; then
              editmode_result="✅ Passed"
            fi
            editmode_details="Tests: $editmode_tests, Failures: $editmode_failures, Errors: $editmode_errors"
          fi
          
          # 結果をGitHub環境変数に設定
          echo "editmode_result=$editmode_result" >> $GITHUB_OUTPUT
          echo "editmode_details=$editmode_details" >> $GITHUB_OUTPUT
          
      # ジョブサマリーにテスト結果を表示
      - name: Job Summary
        if: always()
        run: |
          echo "## 🧿 Unity Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Result | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ steps.parse-results.outputs.editmode_result }} | ${{ steps.parse-results.outputs.editmode_details }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
